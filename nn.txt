udp server

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#define PORT 12345
#define MAX_BUFFER_SIZE 1024

// Function to sort an array of integers using bubble sort
void bubbleSort(int arr[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main()
{

     
    int sockfd;
    struct sockaddr_in serverAddr, clientAddr;
    int clientAddrLen = sizeof(clientAddr);

    int buffer[MAX_BUFFER_SIZE / sizeof(int)];
    int bufferLen;

    // Create UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
    {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Server address configuration
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    // Bind socket
    if (bind(sockfd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1)
    {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    printf("Server is listening...\n");

    while (1)
    {
        // Receive data from the client
        bufferLen = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr *)&clientAddr, &clientAddrLen);
        if (bufferLen == -1)
        {
            perror("Receive failed");
            exit(EXIT_FAILURE);
        }

        // Convert bytes to array of integers
        int numElements = bufferLen / sizeof(int);

        // Sort the received array
        bubbleSort(buffer, numElements);

        // Send the sorted array back to the client
        if (sendto(sockfd, buffer, bufferLen, 0, (struct sockaddr *)&clientAddr, clientAddrLen) == -1)
        {
            perror("Send failed");
            exit(EXIT_FAILURE);
        }

        printf("Sorted array sent back to client.\n");
    }

    close(sockfd);
    return 0;
}





udp client



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define PORT 12345
#define MAX_BUFFER_SIZE 1024

int main()
{
    int sockfd;
    struct sockaddr_in serverAddr;
    int buffer[MAX_BUFFER_SIZE / sizeof(int)];
    int bufferLen;

    // Create UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
    {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Server address configuration
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    // User input
    int numElements;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &numElements);

    printf("Enter %d integers:\n", numElements);
    for (int i = 0; i < numElements; i++)
    {
        scanf("%d", &buffer[i]);
    }

    bufferLen = numElements * sizeof(int);

    // Send data to the server
    if (sendto(sockfd, buffer, bufferLen, 0, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1)
    {
        perror("Send failed");
        exit(EXIT_FAILURE);
    }

    printf("Array sent to server.\n");

    // Receive sorted array from the server
    bufferLen = recvfrom(sockfd, buffer, sizeof(buffer), 0, NULL, NULL);
    if (bufferLen == -1)
    {
        perror("Receive failed");
        exit(EXIT_FAILURE);
    }

    // Convert bytes to array of integers
    int numReceived = bufferLen / sizeof(int);
    printf("%d\n", numReceived);

    printf("Sorted array from server: ");
    for (int i = 0; i < numReceived; i++)
    {
        printf("%d ", buffer[i]);
    }
    printf("\n");

    numElements;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &numElements);

    printf("Enter %d integers:\n", numElements);
    for (int i = 0; i < numElements; i++)
    {
        scanf("%d", &buffer[i]);
    }

    bufferLen = numElements * sizeof(int);

    // Send data to the server
    if (sendto(sockfd, buffer, bufferLen, 0, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1)
    {
        perror("Send failed");
        exit(EXIT_FAILURE);
    }

    printf("Array sent to server.\n");

    // Receive sorted array from the server
    bufferLen = recvfrom(sockfd, buffer, sizeof(buffer), 0, NULL, NULL);
    if (bufferLen == -1)
    {
        perror("Receive failed");
        exit(EXIT_FAILURE);
    }

    // Convert bytes to array of integers
    numReceived = bufferLen / sizeof(int);
    printf("%d\n", numReceived);

    printf("Sorted array from server: ");
    for (int i = 0; i < numReceived; i++)
    {
        printf("%d ", buffer[i]);
    }
    printf("\n");

    close(sockfd);
    return 0;
}





tcp server

// Server side C program to demonstrate Socket
// programming
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080
int main()
{
        //file descriptor of server socket and newly accepted socket connection  
	int server_fd, client_fd;
	//size of the  value to be read by the socket 
	ssize_t valread;
	//Struct to hold server address information 
	struct sockaddr_in address;
	//variable to store the length of the address
	socklen_t addrlen = sizeof(address);
	//character array to store the nessage from client
	char buffer[1024] = { 0 };
	char* hello = "Hello from server";
	

	// Creating socket file descriptor
	server_fd = socket(AF_INET, SOCK_STREAM, 0);
	

	
	// Now filling the details in the address struct that was previously made to store the socket data.
	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
	address.sin_port = htons(PORT);

	// Forcefully attaching socket to the port 8080
	bind(server_fd, (struct sockaddr*)&address,
			sizeof(address));
	//listen for connection
	listen(server_fd, 3);
	//accepting new connection using accept system call
	client_fd
		= accept(server_fd, (struct sockaddr*)&address,
				&addrlen)
	//reading data using valread size and storing the data in buffer			
	valread = read(client_fd, buffer,
				1024 - 1); // subtract 1 for the null
							// terminator at the end
	printf("%s\n", buffer);
	//sending message back to the client
	send(client_fd, hello, strlen(hello), 0);
	printf("Hello message sent\n");

	// closing the connected socket
	close(client_fd);
	// closing the listening socket
	close(server_fd);
	return 0;
}



tcp client

// Client side C program to demonstrate Socket
// programming
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080

int main(int argc, char const* argv[])
{
	int status, valread, client_fd;
	struct sockaddr_in serv_addr;
	char* hello = "Hello from client";
	char buffer[1024] = { 0 };
	if ((client_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		printf("\n Socket creation error \n");
		return -1;
	}

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(PORT);

	// Convert IPv4 and IPv6 addresses from text to binary
	// form
	if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)
		<= 0) {
		printf(
			"\nInvalid address/ Address not supported \n");
		return -1;
	}

	if ((status
		= connect(client_fd, (struct sockaddr*)&serv_addr,
				sizeof(serv_addr)))
		< 0) {
		printf("\nConnection Failed \n");
		return -1;
	}
	send(client_fd, hello, strlen(hello), 0);
	printf("Hello message sent\n");
	valread = read(client_fd, buffer,
				1024 - 1); // subtract 1 for the null
							// terminator at the end
	printf("%s\n", buffer);

	// closing the connected socket
	close(client_fd);
	return 0;
}




tcp string rev sever

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define MAX_STR_LEN 100

void reverseString(char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;
    }
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int port = atoi(argv[1]);
    int sockfd, clientfd;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrLen = sizeof(clientAddr);

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serverAddr.sin_port = htons(port);

    if (bind(sockfd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    if (listen(sockfd, 5) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d\n", port);

    while (1) {
        clientfd = accept(sockfd, (struct sockaddr *)&clientAddr, &addrLen);
        if (clientfd < 0) {
            perror("Accept failed");
            exit(EXIT_FAILURE);
        }

        char buffer[MAX_STR_LEN];
        ssize_t bytesRead = read(clientfd, buffer, sizeof(buffer));
        if (bytesRead < 0) {
            perror("Read failed");
            exit(EXIT_FAILURE);
        }

        buffer[bytesRead] = '\0';
        printf("Received from client: %s\n", buffer);

        reverseString(buffer);

        ssize_t bytesSent = write(clientfd, buffer, strlen(buffer));
        if (bytesSent < 0) {
            perror("Write failed");
            exit(EXIT_FAILURE);
        }

        printf("Sending to client: %s\n", buffer);
        close(clientfd);
    }

    close(sockfd);
    return 0;
}




tcp string rev client


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define MAX_STR_LEN 100
int main(int argc, char *argv[])
{ if (argc != 3) {
fprintf(stderr, "Usage: %s <server_ip> <port>\n", argv[0]);
exit(EXIT_FAILURE);
}
char *serverIp = argv[1];
int port = atoi(argv[2]);
int sockfd;
struct sockaddr_in serverAddr;
sockfd = socket(AF_INET, SOCK_STREAM, 0);
if (sockfd < 0) {
perror("Socket creation failed");exit(EXIT_FAILURE);
}
memset(&serverAddr, 0, sizeof(serverAddr));
serverAddr.sin_family = AF_INET;
serverAddr.sin_addr.s_addr = inet_addr(serverIp);
serverAddr.sin_port = htons(port);
if (connect(sockfd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) <
0) {
perror("Connection failed");
exit(EXIT_FAILURE);
}
char inputStr[MAX_STR_LEN];
printf("Enter a string to reverse: ");
fgets(inputStr, sizeof(inputStr), stdin);
ssize_t bytesSent = write(sockfd, inputStr, strlen(inputStr));
if (bytesSent < 0) {
perror("Write failed");
exit(EXIT_FAILURE);
}
char buffer[MAX_STR_LEN];
ssize_t bytesRead = read(sockfd, buffer, sizeof(buffer));
if (bytesRead < 0) {
perror("Read failed");
exit(EXIT_FAILURE);
}
buffer[bytesRead] = '\0';
printf("Reversed string received from server: %s\n", buffer);
close(sockfd);
return 0;
}




expression solving server 

#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <string.h>
#include <unistd.h>


int main(int argc ,char* argv[]){

int sfd,cfd;
int port = atoi(argv[1]);
socklen_t addr_len;
struct sockaddr_in my_addr,peer_addr;

sfd = socket(AF_INET,SOCK_STREAM,0);

memset(&my_addr,0,sizeof(my_addr));
my_addr.sin_family = AF_INET;
my_addr.sin_addr.s_addr = htonl(INADDR_ANY);
my_addr.sin_port = htons(port);

bind(sfd,(struct sockaddr *)&my_addr,sizeof(my_addr));

listen(sfd,3);

addr_len = sizeof(peer_addr);
while(1){
cfd = accept(sfd,(struct sockaddr *)&peer_addr,&addr_len);

//----------------------------------Data sending and recieving starts here-------------------------//

pid_t pid = fork();
if(pid==0){ 
close(sfd);
char buffer1[10]; 
ssize_t bytesread1 = read(cfd, buffer1,sizeof(buffer1));
buffer1[bytesread1] = '\0';
printf("Read first number waiting for second\n");
int first = atoi(buffer1);

char buffer2[10]; 
ssize_t bytesread2 = read(cfd, buffer2,sizeof(buffer2));
buffer2[bytesread2] = '\0';
printf("Read second number waiting for expression\n");



int second = atoi(buffer2);

char buffer3[10]; 
ssize_t bytesread3 = read(cfd, buffer3,sizeof(buffer3));
printf("Read  expression\n");
char exp = buffer3[0];

int ans;
if(exp=='+'){
ans = first+second;


}
else if(exp=='-'){

ans = first-second;

}
else if(exp=='*'){
ans = first*second;
}
else{

ans=first/second;
}


char ansdata[1024];

sprintf(ansdata,"%d",ans);


printf("the final answer bieng sent to client is -- %d",ans);

ssize_t byteswrite = write(cfd, ansdata ,sizeof(ansdata));
close(cfd);
exit(0);
}
else if(pid<0){

perror("fork");
close(cfd);

}
else{

close(cfd);
}


}



return 0;

}


expression solving client


#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <string.h>
#include <unistd.h>

int main(int argc ,char* argv[]){

int sfd;
int port = atoi(argv[2]);
char* ip = argv[1];

struct sockaddr_in my_addr;
sfd = socket(AF_INET,SOCK_STREAM,0);

memset(&my_addr,0,sizeof(my_addr));
my_addr.sin_family = AF_INET;
my_addr.sin_addr.s_addr = INADDR_ANY;
my_addr.sin_port = htons(port);
connect(sfd,(struct sockaddr *)&my_addr,sizeof(my_addr));
//----------------_Data sening and recieving-------------------------------//


//first
printf("Enter first number--\n");
char first[10];
fgets(first,sizeof(first),stdin);
ssize_t firstwritten = write(sfd,first,sizeof(first));

//second
printf("Enter second number--\n");
char second[10];
fgets(second,sizeof(second),stdin);
ssize_t secondwritten = write(sfd,second,sizeof(second));

//exp
printf("Enter expresion\n");
char expr[10];
fgets(expr,sizeof(expr),stdin);
ssize_t exprwritten = write(sfd,expr,sizeof(expr));


//data result from server
char buffer[100];

ssize_t dataans = read(sfd,buffer,sizeof(buffer));
buffer[dataans]='\0';
printf("Ans recieved from client is -- %s \n",buffer);


close(sfd);
}